@page "/"
@implements IAsyncDisposable
@inject IDeviceManagerService DeviceService
@inject IDialogService DialogService
@using Microsoft.AspNetCore.SignalR.Client
@using GreeACLocalServer.UI.Services



<PageTitle>Devices</PageTitle>

<MudText Typo="Typo.h4" GutterBottom="true">Air Conditioner Devices</MudText>

@if (_loading)
{
    <MudProgressCircular Color="Color.Primary" Indeterminate="true" />
    <MudText Typo="Typo.body1" Class="mt-2">Loading devices...</MudText>
}
else if (_error is not null)
{
    <MudAlert Severity="Severity.Error" ContentAlignment="HorizontalAlignment.Center" ShowCloseIcon="false" Class="mb-4">
        @_error
    </MudAlert>
}
else if (_devices.Count == 0)
{
    <MudAlert Severity="Severity.Info" ContentAlignment="HorizontalAlignment.Center" ShowCloseIcon="false">
        No devices found. Devices will appear here when air conditioners connect to the server.
    </MudAlert>
}
else
{
    <MudGrid>
        @foreach (var device in _devices.OrderBy(x => x.DNSName))
        {
            var isOnline = IsDeviceOnline(device);
            <MudItem xs="12" sm="6" md="4" lg="3" @key="device.MacAddress">
                <MudCard Elevation="3" Class="mud-height-full">
                    <MudCardContent>
                        <div class="d-flex justify-space-between align-center mb-2">
                            <MudIcon Icon="@Icons.Material.Filled.Air" Color="Color.Primary" Size="Size.Large" />
                            <MudText Typo="Typo.caption" Color="@(isOnline ? Color.Success : Color.Error)" Class="font-weight-bold">
                                ● @(isOnline ? "Online" : "Offline")
                            </MudText>
                        </div>
                        <MudText Typo="Typo.h6" Class="mb-1">@device.DNSName</MudText>
                        <MudDivider Class="mb-2" />
                        <div class="d-flex align-center">
                            <MudIcon Icon="@Icons.Material.Filled.Memory" Size="Size.Small" Class="mr-2" />
                            <MudText Typo="Typo.body2">@DeviceHelpers.FormatMacAddress(device.MacAddress)</MudText>
                        </div>
                    </MudCardContent>
                    <MudCardActions>
                        <MudButton Variant="Variant.Text" 
                                 StartIcon="@Icons.Material.Filled.Info" 
                                 Color="Color.Primary" 
                                 Size="Size.Small"
                                 OnClick="() => ShowDeviceDetails(device)" >
                            Details
                        </MudButton>
                        <MudSpacer />
                        <MudIconButton Icon="@Icons.Material.Filled.Delete" 
                                     Color="Color.Error" 
                                     Size="Size.Small"
                                     title="Remove Device"
                                     OnClick="() => RemoveDevice(device)" />
                    </MudCardActions>
                </MudCard>
            </MudItem>
        }
    </MudGrid>
}

@code {
    [Inject] private NavigationManager Navigation { get; set; } = default!;

    private bool _loading = true;
    private string? _error;
    private List<DeviceDto> _devices = new();
    private HubConnection? _hub;
    private DeviceDetailsDialog? _openDialogComponent;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            // Initialize SignalR connection
            if(!(await InitializeSignalRConnection()))
            {
                // Initial fetch as fallback
                var items = await DeviceService.GetAllDeviceStatesAsync();
                _devices = items.ToList();
            }
        }
        catch (Exception ex)
        {
            _error = $"Failed to load devices: {ex.Message}";
            Console.WriteLine(_error);
        }
        finally
        {
            _loading = false;
        }
    }

    private async Task<bool> InitializeSignalRConnection()
    {
        try
        {
            var hubUrl = Navigation.ToAbsoluteUri("/hubs/devices");

            _hub = new HubConnectionBuilder()
                .WithUrl(hubUrl)
                .WithAutomaticReconnect(new LinearBackoffRetryPolicy())
                .Build();

            // Set up event handlers
            SetupSignalREventHandlers();

            // Start connection with timeout
            await _hub.StartAsync();
            return true;
        }
        catch (Exception ex)
        {
            Console.WriteLine($"SignalR connection failed: {ex.Message}");
            return false;
        }
    }

    private void SetupSignalREventHandlers()
    {
        if (_hub is null) return;

        _hub.On<IEnumerable<DeviceDto>>(DeviceHubMethods.DevicesSnapshot, async snapshot =>
        {
            _devices = snapshot.ToList();
            await InvokeAsync(StateHasChanged);
            await UpdateOpenDialogs();
        });

        _hub.On<DeviceDto>(DeviceHubMethods.DeviceUpserted, async dto =>
        {
            var idx = _devices.FindIndex(d => string.Equals(d.MacAddress, dto.MacAddress, StringComparison.OrdinalIgnoreCase));
            if (idx >= 0)
            {
                _devices[idx] = dto;
            }
            else
            {
                _devices.Add(dto);
            }
            await InvokeAsync(StateHasChanged);
            await UpdateOpenDialog(dto);
        });

        _hub.On<string>(DeviceHubMethods.DeviceRemoved, async mac =>
        {
            if(_devices.RemoveAll(d => string.Equals(d.MacAddress, mac, StringComparison.OrdinalIgnoreCase)) > 0)
            {
                await InvokeAsync(StateHasChanged);
                CloseDialogForDevice(mac);
            }
        });
    }

    private bool IsDeviceOnline(DeviceDto device)
    {
        // Device is considered offline for display purposes if last connection was more than 10 minutes ago
        // This only affects the visual indicator, devices are never automatically removed
        var threshold = DateTime.UtcNow.AddMinutes(-10);
        return device.LastConnectionTimeUtc > threshold;
    }

    private async Task ShowDeviceDetails(DeviceDto device)
    {
        var parameters = new DialogParameters
        {
            { "Device", device },
            { "OnDialogCreated", new Action<DeviceDetailsDialog>(dialog => 
                {
                    _openDialogComponent = dialog;
                })
            },
            { "OnDialogClosed", new Action(() => 
                {
                    _openDialogComponent = null;
                })
            }
        };

        var options = new DialogOptions()
        {
            MaxWidth = MaxWidth.Medium,
            FullWidth = true,
            CloseButton = true,
            CloseOnEscapeKey = true
        };

        await DialogService.ShowAsync<DeviceDetailsDialog>("Device Details", parameters, options);
    }

    private async Task RemoveDevice(DeviceDto device)
    {
        var result = await DialogService.ShowMessageBox(
            "Confirm Device Removal",
            $"Are you sure you want to remove device '{device.DNSName}' ({DeviceHelpers.FormatMacAddress(device.MacAddress)})?",
            yesText: "Remove", cancelText: "Cancel");

        if (result == true)
        {
            var success = await DeviceService.RemoveDeviceAsync(device.MacAddress);
            if (!success)
            {
                // Show error message if removal failed
                await DialogService.ShowMessageBox(
                    "Remove Failed",
                    $"Failed to remove device '{device.DNSName}'. The device may have already been removed.",
                    "OK");
            }
            // If successful, the device will be removed from the UI via SignalR notification
        }
    }

    private async Task UpdateOpenDialogs()
    {
        // Update all open dialogs with latest device data
        foreach (var device in _devices)
        {
            await UpdateOpenDialog(device);
        }
    }

    private async Task UpdateOpenDialog(DeviceDto updatedDevice)
    {
        if(_openDialogComponent?.Device?.MacAddress == updatedDevice.MacAddress)
        {
            await _openDialogComponent.UpdateDevice(updatedDevice);
        }
    }

    private void CloseDialogForDevice(string macAddress)
    {
        if(_openDialogComponent?.Device?.MacAddress == macAddress)
        {
            _openDialogComponent.CloseDialog();
        }
    }

    public async ValueTask DisposeAsync()
    {
        if (_hub is not null)
        {
            await _hub.DisposeAsync();
        }
    }
}
