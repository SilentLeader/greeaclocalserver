@page "/"
@implements IAsyncDisposable
@rendermode InteractiveAuto
@inject IDeviceManagerService DeviceService
@using Microsoft.AspNetCore.SignalR.Client
@using GreeACLocalServer.UI.Services


<PageTitle>Devices</PageTitle>

<h1>Devices</h1>

@if (_loading)
{
    <p>Loading devices...</p>
}
else if (_error is not null)
{
    <div class="alert alert-danger">@_error</div>
}
else if (_devices.Count == 0)
{
    <p>No devices found.</p>
}
else
{
    <ul>
        @foreach (var d in _devices)
        {
            <li @key="d.MacAddress">
                <strong>@d.MacAddress</strong>
                <div>IP: @d.IpAddress</div>
                <div>Last Seen (UTC): @d.LastConnectionTimeUtc.ToString("u")</div>
            </li>
        }
    </ul>
}

@code {
    private bool _loading = true;
    private string? _error;
    private List<DeviceDto> _devices = new();
    private HubConnection? _hub;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            // Initial fetch as fallback
            var items = await DeviceService.GetAllDeviceStatesAsync();
            _devices = items.ToList();

            // Build SignalR connection with custom retry policy: start 5s, +5s each time, cap 60s
            _hub = new HubConnectionBuilder()
                .WithUrl(Navigation.ToAbsoluteUri("/hubs/devices"))
                .WithAutomaticReconnect(new LinearBackoffRetryPolicy(5, 5, 60))
                .Build();

            _hub.On<IEnumerable<DeviceDto>>("DevicesSnapshot", async snapshot =>
            {
                _devices = snapshot.ToList();
                await InvokeAsync(StateHasChanged);
            });

            _hub.On<DeviceDto>("DeviceUpserted", async dto =>
            {
                var idx = _devices.FindIndex(d => string.Equals(d.MacAddress, dto.MacAddress, StringComparison.OrdinalIgnoreCase));
                if (idx >= 0)
                {
                    _devices[idx] = dto;
                }
                else
                {
                    _devices.Add(dto);
                }
                await InvokeAsync(StateHasChanged);
            });

            _hub.On<string>("DeviceRemoved", async mac =>
            {
                _devices.RemoveAll(d => string.Equals(d.MacAddress, mac, StringComparison.OrdinalIgnoreCase));
                _devices = _devices.ToList();
                await InvokeAsync(StateHasChanged);
            });

            await _hub.StartAsync();
        }
        catch (Exception ex)
        {
            _error = ex.Message;
        }
        finally
        {
            _loading = false;
        }
    }

    [Inject] private NavigationManager Navigation { get; set; } = default!;

    public async ValueTask DisposeAsync()
    {
        if (_hub is not null)
        {
            await _hub.DisposeAsync();
        }
    }
}
